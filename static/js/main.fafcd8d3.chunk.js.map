{"version":3,"sources":["../external \"Cesium\"","MyScene.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","MyScene","state","this","timer","setInterval","getExportData","window","clearInterval","fetch","method","headers","then","response","json","data","needsFlyTo","Math","abs","exportData","anchor","latitude","Number","EPSILON","longitude","console","log","setState","full","position","Cartesian3","fromDegrees","name","description","pixelSize","color","Color","RED","undefined","markers","map","d","i","type","BLUE","destination","duration","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fafcd8d3.chunk.js","sourcesContent":["module.exports = Cesium;","import React from \"react\";\r\nimport { Viewer, Entity, PointGraphics, CameraFlyTo } from \"resium\";\r\nimport { Cartesian3, Color } from \"cesium\";\r\n\r\nexport default class MyScene extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timer = setInterval(() => {\r\n            this.getExportData();\r\n        }, 1000);\r\n\r\n        this.getExportData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timer) {\r\n            window.clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    getExportData() {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' },\r\n        };\r\n        fetch('https://augmentedrealitywhiteboardbackend.azurewebsites.net/exportdata', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                var needsFlyTo = true;\r\n                if ((Math.abs((this.state.exportData?.anchor?.latitude ?? 0) - (data?.anchor?.latitude ?? 0)) < Number.EPSILON)\r\n                    && (Math.abs((this.state.exportData?.anchor?.longitude ?? 0) - (data?.anchor?.longitude ?? 0)) < Number.EPSILON)) {\r\n                    needsFlyTo = false;\r\n                }\r\n                console.log(this.state.exportData?.anchor)\r\n                console.log(needsFlyTo);\r\n                this.setState({ needsFlyTo: needsFlyTo, exportData: data })\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Viewer full>\r\n                {this.state?.exportData?.anchor ? (<Entity\r\n                    position={Cartesian3.fromDegrees(\r\n                        this.state.exportData.anchor.longitude,\r\n                        this.state.exportData.anchor.latitude\r\n                    )}\r\n                    name={\"Anchor\"}\r\n                    description={`Latitude: ${this.state.exportData.anchor.latitude}\\nLongitude: ${this.state.exportData.anchor.longitude}`}\r\n                >\r\n                    <PointGraphics pixelSize={10} color={Color.RED} />\r\n                </Entity>) : undefined}\r\n\r\n                {this.state?.exportData?.markers ? this.state.exportData.markers.map((d, i) => (\r\n                    <Entity\r\n                        key={i}\r\n                        position={Cartesian3.fromDegrees(d.longitude, d.latitude)}\r\n                        name={d.name}\r\n                        description={`Marker Type: ${d.type}\\nLatitude: ${d.latitude}\\nLongitude: ${d.longitude}`}\r\n                    >\r\n                        <PointGraphics pixelSize={10} color={Color.BLUE} />\r\n                    </Entity>\r\n                )) : undefined}\r\n                {this.state?.needsFlyTo ? (<CameraFlyTo\r\n                    destination={Cartesian3.fromDegrees(\r\n                        this.state.exportData?.anchor?.longitude ?? 0,\r\n                        this.state.exportData?.anchor?.latitude ?? 0,\r\n                        7500000\r\n                    )}\r\n                    duration={3}\r\n                />) : undefined}\r\n            </Viewer>\r\n        );\r\n    }\r\n}","import \"./App.css\";\r\nimport { hot } from \"react-hot-loader/root\";\r\nimport MyScene from \"./MyScene\";\r\n\r\nfunction App() {\r\n  return (\r\n    <MyScene />\r\n  );\r\n}\r\n\r\nexport default hot(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}